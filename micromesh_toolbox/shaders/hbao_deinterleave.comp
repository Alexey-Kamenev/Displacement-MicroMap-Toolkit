/*
*  Copyright (c) 2014-2023, NVIDIA CORPORATION.All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without
*  modification, are permitted provided that the following conditions
*  are met :
*  * Redistributions of source code must retain the above copyright
*    notice, this list of conditions and the following disclaimer.
*  * Redistributions in binary form must reproduce the above copyright
*    notice, this list of conditions and the following disclaimer in the
*    documentation and / or other materials provided with the distribution.
*  * Neither the name of NVIDIA CORPORATION nor the names of its
*    contributors may be used to endorse or promote products derived
*    from this software without specific prior written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
*  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
*  PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE COPYRIGHT OWNER OR
*  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
*  EXEMPLARY, OR CONSEQUENTIAL DAMAGES( INCLUDING, BUT NOT LIMITED TO,
*  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
*  PROFITS; OR BUSINESS INTERRUPTION ) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
*  ( INCLUDING NEGLIGENCE OR OTHERWISE ) ARISING IN ANY WAY OUT OF THE USE
*  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_control_flow_attributes : require

#include "hbao.h"

layout(binding = NVHBAO_MAIN_TEX_LINDEPTH) uniform sampler2D texLinearDepth;
layout(binding = NVHBAO_MAIN_IMG_DEPTHARRAY, r32f) uniform image2DArray imgDepthArray;

//----------------------------------------------------------------------------------

void outputColor(ivec2 intCoord, int layer, float value)
{
  imageStore(imgDepthArray, ivec3(intCoord, layer), vec4(value, 0, 0, 0));
}

void main()
{
  ivec2 intCoord;
  vec2  texCoord;

  if(setupCoordQuarter(intCoord, texCoord))
    return;

  vec2 uv = vec2(intCoord) * 4.0 + 0.5;
  uv *= control.InvFullResolution;

  vec4 S0 = textureGather(texLinearDepth, uv, 0);
  vec4 S1 = textureGatherOffset(texLinearDepth, uv, ivec2(2, 0), 0);
  vec4 S2 = textureGatherOffset(texLinearDepth, uv, ivec2(0, 2), 0);
  vec4 S3 = textureGatherOffset(texLinearDepth, uv, ivec2(2, 2), 0);

  outputColor(intCoord, 0, S0.w);
  outputColor(intCoord, 1, S0.z);
  outputColor(intCoord, 2, S1.w);
  outputColor(intCoord, 3, S1.z);
  outputColor(intCoord, 4, S0.x);
  outputColor(intCoord, 5, S0.y);
  outputColor(intCoord, 6, S1.x);
  outputColor(intCoord, 7, S1.y);

  outputColor(intCoord, 0 + 8, S2.w);
  outputColor(intCoord, 1 + 8, S2.z);
  outputColor(intCoord, 2 + 8, S3.w);
  outputColor(intCoord, 3 + 8, S3.z);
  outputColor(intCoord, 4 + 8, S2.x);
  outputColor(intCoord, 5 + 8, S2.y);
  outputColor(intCoord, 6 + 8, S3.x);
  outputColor(intCoord, 7 + 8, S3.y);
}
