/*
 * SPDX-FileCopyrightText: Copyright (c) 2019-2023 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
 * SPDX-License-Identifier: LicenseRef-NvidiaProprietary
 *
 * NVIDIA CORPORATION, its affiliates and licensors retain all intellectual
 * property and proprietary rights in and to this material, related
 * documentation and any modifications thereto. Any use, reproduction,
 * disclosure or distribution of this material and related documentation
 * without an express license agreement from NVIDIA CORPORATION or
 * its affiliates is strictly prohibited.
 */

#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int8 : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int16 : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require

#include "device_host.h"
#include "dh_bindings.h"
#include "dh_scn_desc.h"
#include "payload.glsl"
#include "nvvkhl/shaders/random.glsl"


// clang-format off
layout(location = 0) rayPayloadInEXT HitPayload payload;

layout(buffer_reference, scalar) readonly buffer Vertices        { vec4 v[]; };
layout(buffer_reference, scalar) readonly buffer TexCoords       { vec2 v[]; };
layout(buffer_reference, scalar) readonly buffer Indices         { uvec3 i[]; };
layout(buffer_reference, scalar) readonly buffer DeviceMeshInfos { DeviceMeshInfo i[]; };
layout(buffer_reference, scalar) readonly buffer Materials       { GltfShadeMaterial m[]; };
layout(buffer_reference, scalar) readonly buffer InstanceInfos   { InstanceInfo i[]; };

layout(set = 1, binding = eFrameInfo) uniform FrameInfo_ { FrameInfo frameInfo; };
layout(set = 1, binding = eSceneDesc) readonly buffer SceneDesc_ { SceneDescription sceneDesc; };
layout(set = 1, binding = eTextures)  uniform sampler2D texturesMap[]; // all textures

layout(push_constant) uniform RtxPushConstant_ { PushConstant pc; };

  // clang-format on

#include "nvvkhl/shaders/mat_eval.glsl"


hitAttributeEXT vec2 attribs;


//-----------------------------------------------------------------------
//-----------------------------------------------------------------------
vec2 GetHitState(DeviceMeshInfo pinfo)
{

  // Vextex and indices of the primitive
  Vertices  vertices  = Vertices(pinfo.vertexPositionNormalBuffer);
  Indices   indices   = Indices(pinfo.triangleVertexIndexBuffer);
  TexCoords texcoords = TexCoords(pinfo.vertexTexcoordBuffer);


  // Barycentric coordinate on the triangle
  const vec3 barycentrics = vec3(1.0 - attribs.x - attribs.y, attribs.x, attribs.y);

  // Getting the 3 indices of the triangle (local)
  uvec3 triangleIndex = indices.i[gl_PrimitiveID];

  const vec2 uv0 = texcoords.v[triangleIndex.x];
  const vec2 uv1 = texcoords.v[triangleIndex.y];
  const vec2 uv2 = texcoords.v[triangleIndex.z];

  // All vertex attributes of the triangle.
  //Vertex v0 = vertices.v[triangleIndex.x];
  //Vertex v1 = vertices.v[triangleIndex.y];
  //Vertex v2 = vertices.v[triangleIndex.z];
  //
  //
  //// TexCoord
  //const vec2 uv0 = vec2(v0.position.w, v0.normal.w);
  //const vec2 uv1 = vec2(v1.position.w, v1.normal.w);
  //const vec2 uv2 = vec2(v2.position.w, v2.normal.w);
  vec2       uv  = uv0 * barycentrics.x + uv1 * barycentrics.y + uv2 * barycentrics.z;

  return uv;
}

//-----------------------------------------------------------------------
//-----------------------------------------------------------------------
void main()
{

  // Retrieve the Primitive mesh buffer information
  DeviceMeshInfos pInfo_ = DeviceMeshInfos(sceneDesc.deviceMeshInfoAddress);
  DeviceMeshInfo  pinfo  = pInfo_.i[gl_InstanceCustomIndexEXT];

  InstanceInfos instInfos = InstanceInfos(sceneDesc.instInfoAddress);
  InstanceInfo  instInfo = instInfos.i[gl_InstanceID];

  // Scene materials
  uint              matIndex  = max(0, instInfo.materialID);  // material of primitive mesh
  Materials         materials = Materials(sceneDesc.materialAddress);
  GltfShadeMaterial mat       = materials.m[matIndex];

  float baseColorAlpha = mat.pbrBaseColorFactor.a;
  if(mat.pbrBaseColorTexture > -1)
  {
    vec2 uv = GetHitState(pinfo);

    baseColorAlpha *= texture(texturesMap[nonuniformEXT(mat.pbrBaseColorTexture)], uv).a;
  }

  float opacity;
  if(mat.alphaMode == ALPHA_MASK)
  {
    opacity = baseColorAlpha > mat.alphaCutoff ? 1.0 : 0.0;
  }
  else
  {
    opacity = baseColorAlpha;
  }

  // Do alpha blending the stochastically way
  if(rand(payload.seed) > opacity)
    ignoreIntersectionEXT;
}
