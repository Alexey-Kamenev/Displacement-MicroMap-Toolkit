/*
 * SPDX-FileCopyrightText: Copyright (c) 2019-2023 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
 * SPDX-License-Identifier: LicenseRef-NvidiaProprietary
 *
 * NVIDIA CORPORATION, its affiliates and licensors retain all intellectual
 * property and proprietary rights in and to this material, related
 * documentation and any modifications thereto. Any use, reproduction,
 * disclosure or distribution of this material and related documentation
 * without an express license agreement from NVIDIA CORPORATION or
 * its affiliates is strictly prohibited.
 */

#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_shader_image_load_formatted : enable  // The folowing extension allow to pass images as function parameters
#extension GL_EXT_shader_explicit_arithmetic_types : enable

#include "device_host.h"
#include "dh_bindings.h"
#include "payload.glsl"
#include "dh_scn_desc.h"

#include "nvvkhl/shaders/random.glsl"
#include "nvvkhl/shaders/constants.glsl"
#include "nvvkhl/shaders/dh_sky.h"
#include "nvvkhl/shaders/ggx.glsl"
#include "nvvkhl/shaders/ray_util.glsl"

#include "nvvkhl/shaders/dh_hdr.h"

// clang-format off
layout(location = 0) rayPayloadEXT HitPayload payload;

layout(buffer_reference, scalar) readonly buffer Materials { GltfShadeMaterial m[]; };
layout(buffer_reference, scalar) readonly buffer InstanceInfos { InstanceInfo i[]; };
layout(buffer_reference, scalar) readonly buffer DeviceMeshInfos { DeviceMeshInfo i[]; };


layout(set = 0, binding = eTlas)                      uniform accelerationStructureEXT topLevelAS;
layout(set = 0, binding = eOutImage, rgba32f)         uniform image2D image;

layout(set = 1, binding = eFrameInfo) uniform FrameInfo_ { FrameInfo frameInfo; };
layout(set = 1, binding = eSceneDesc) readonly buffer SceneDesc_ { SceneDescription sceneDesc; };
layout(set = 1, binding = eTextures)  uniform sampler2D texturesMap[]; // all textures
layout(set = 2, binding = eSkyParam) uniform SkyInfo_ { ProceduralSkyShaderParameters skyInfo; };
layout(set = 3, binding = eImpSamples, scalar)	buffer _EnvAccel { EnvAccel envSamplingData[]; };
layout(set = 3, binding = eHdr) uniform sampler2D hdrTexture;

// clang-format on

#include "mat_eval.glsl"
#include "pbr_eval.glsl"
#include "nvvkhl/shaders/hdr_env_sampling.glsl"
#include "nvvkhl/shaders/light_contrib.glsl"
#include "lighting.glsl"


layout(push_constant) uniform RtxPushConstant_
{
  PushConstant pc;
};

layout(constant_id = 0) const int CONST_SHADE_MODE = 0;

struct Ray
{
  vec3 origin;
  vec3 direction;
};

#define EPSILON 1.0F/1024.0f

//-----------------------------------------------------------------------
// Shoot a ray an return the information of the closest hit, in the
// PtPayload structure (PRD)
//
void traceRay(Ray r, inout uint seed)
{
  payload.hitT  = 0.0F;
  payload.seed  = seed;
  uint rayFlags = gl_RayFlagsCullBackFacingTrianglesEXT;
  traceRayEXT(topLevelAS, rayFlags, 0xFF, 0, 0, 0, r.origin, EPSILON, r.direction, INFINITE, 0);
  seed = payload.seed;
}

//-----------------------------------------------------------------------
// Shadow ray - return true if a ray hits anything
//
bool traceShadow(Ray r, float maxDist)
{
  payload.hitT = 0.0F;
  uint rayFlags = gl_RayFlagsTerminateOnFirstHitEXT | gl_RayFlagsCullBackFacingTrianglesEXT | gl_RayFlagsSkipClosestHitShaderEXT;
  traceRayEXT(topLevelAS, rayFlags, 0xFF, 0, 0, 0, r.origin, EPSILON, r.direction, maxDist, 0);
  bool isHit = (payload.hitT != INFINITE);  // payload will change if miss shader is invoked
  return isHit;
}


//-----------------------------------------------------------------------
//-----------------------------------------------------------------------
vec3 pathTrace(Ray r, inout uint seed)
{
  vec3 radiance   = vec3(0.0F);
  vec3 throughput = vec3(1.0F);

  Materials materials = Materials(sceneDesc.materialAddress);


  for(int depth = 0; depth < pc.maxDepth; depth++)
  {
    traceRay(r, seed);

    HitState hit = payload.hit;

    // Hitting the environment, then exit
    if(payload.hitT == INFINITE)
    {
      if(frameInfo.useSky == 1)
      {
        radiance += proceduralSky(skyInfo, r.direction, 0);
      }
      else
      {
        // Adding HDR lookup
        vec3 dir = rotate(r.direction, vec3(0, 1, 0), -frameInfo.envRotation);
        vec2 uv  = getSphericalUv(dir);  // See sampling.glsl
        vec3 env = texture(hdrTexture, uv).rgb;
        radiance += env * frameInfo.envColor.xyz;
      }

      radiance *= throughput;
      return radiance;
    }

    // Retrieve the Instance buffer information
    InstanceInfos pInfo_ = InstanceInfos(sceneDesc.instInfoAddress);
    InstanceInfo  pInfo  = pInfo_.i[payload.instanceIndex];

    // Setting up the material
    PbrMaterial       pbrMat;
    int               matIndex  = max(0, pInfo.materialID);  // material of primitive mesh
    GltfShadeMaterial matetrial = materials.m[matIndex];

    // Use the face normal for faceted shading. Also, meshes with micromaps
    // usually includes normal maps. Without them, displaced geometry will be
    // shaded flat. If the hit was a micromesh and it has none, use face normals
    // instead.
    if(CONST_SHADE_MODE == eRenderShading_faceted
       || (payload.micromesh && CONST_SHADE_MODE == eRenderShading_default && matetrial.normalTexture == -1))
    {
      hit.nrm = hit.geonrm;
    }

    pbrMat = evaluateMaterial(matetrial, hit.nrm, hit.tangent, hit.bitangent, hit.uv);

    // Use a constant grey for faceted shading to match rasterization
    if(CONST_SHADE_MODE == eRenderShading_faceted)
    {
      pbrMat.albedo = vec4(0.2);
    }

    // Adding emissive
    radiance += pbrMat.emissive * throughput;

    // Get contribution from IBL / Sky
    vec3                   to_eye = -r.direction;
    VisibilityContribution vis_contrib;
    if(frameInfo.useSky == 1)
    {
      vis_contrib = lightsContribution(pbrMat, to_eye, hit.pos, hit.nrm, frameInfo.nbLights, seed);
    }
    else
    {
      vis_contrib = environmentLightingContribution(pbrMat, to_eye, hit.nrm, frameInfo.envColor.xyz, frameInfo.envRotation, seed);
    }
    vec3 contrib = vis_contrib.radiance;
    contrib *= throughput;

    // Sampling and bouncing
    float pdf = 0.0F;
    vec3  ray_direction;
    vec3  rand_val = vec3(rand(seed), rand(seed), rand(seed));
    vec3  brdf     = pbrSample(pbrMat, to_eye, ray_direction, pdf, rand_val);

    if(dot(hit.nrm, ray_direction) > 0.0F && pdf > 0.0F)
    {
      throughput *= brdf / pdf;
    }
    else
    {
      break;
    }

    // Setting next ray
    r.direction = ray_direction;
    r.origin    = offsetRay(hit.pos, hit.nrm);

    // Shoot shadow ray if the light is visible
    if(vis_contrib.visible)
    {
      Ray  shadowRay = Ray(r.origin, vis_contrib.lightDir);
      bool inShadow  = traceShadow(shadowRay, INFINITE);
      // We are adding the contribution to the radiance only if the ray is not occluded by an object.
      if(!inShadow)
      {
        radiance += contrib;
      }
    }

    // Russian-Roulette
    float rrPcont = min(max(throughput.x, max(throughput.y, throughput.z)) + 0.001F, 0.95F);
    if(rand(seed) >= rrPcont)
      break;                // paths with low throughput that won't contribute
    throughput /= rrPcont;  // boost the energy of the non-terminated paths
  }

  return radiance;
}


//-----------------------------------------------------------------------
// Sampling the pixel
//-----------------------------------------------------------------------
vec3 samplePixel(inout uint seed)
{
  // Subpixel jitter: send the ray through a different position inside the pixel each time, to provide antialiasing.
  vec2 subpixel_jitter = pc.frame == 0 ? vec2(0.5f, 0.5f) : vec2(rand(seed), rand(seed));

  const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + subpixel_jitter;
  const vec2 inUV        = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
  const vec2 d           = inUV * 2.0 - 1.0;

  const vec4 origin    = frameInfo.viewInv * vec4(0.0F, 0.0F, 0.0F, 1.0F);
  const vec4 target    = frameInfo.projInv * vec4(d.x, d.y, 0.01F, 1.0F);
  const vec4 direction = frameInfo.viewInv * vec4(normalize(target.xyz), 0.0F);

  Ray ray = Ray(origin.xyz, direction.xyz);

  vec3 radiance = pathTrace(ray, seed);

  // Removing fireflies
  float lum = dot(radiance, vec3(0.212671F, 0.715160F, 0.072169F));
  if(lum > frameInfo.maxLuminance)
  {
    radiance *= frameInfo.maxLuminance / lum;
  }

  return radiance;
}


/// ---------------------------------------------------------------------------------------
///
///
void main()
{
  // Initialize the random number
  uint seed = xxhash32(uvec3(gl_LaunchIDEXT.xy, pc.frame));

  // Sampling n times the pixel
  vec3 pixel_color = vec3(0.0F, 0.0F, 0.0F);
  for(int s = 0; s < pc.maxSamples; s++)
  {
    pixel_color += samplePixel(seed);
  }
  pixel_color /= pc.maxSamples;

  if(pc.frame == 0)  // first frame
  {
    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(pixel_color, 1.0F));
  }
  else
  {
    // Do accumulation over time
    float a         = 1.0F / float(pc.frame + 1);
    vec3  old_color = imageLoad(image, ivec2(gl_LaunchIDEXT.xy)).xyz;
    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(mix(old_color, pixel_color, a), 1.0F));
  }
}
